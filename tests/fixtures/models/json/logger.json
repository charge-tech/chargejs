{
    "event": {
        "start": "service started",
        "create": "create",
        "update": "update",
        "delete": "delete",
        "read": "read",
        "error": "internal server error",
        "queue": "job added to queue"
    },
    "info": {
        "serverStart": "payments microservice started",
        "meta": "meta not defined",
        "private": {
            "topup": "create topup transaction",
            "topupError": "create topup transaction error"
        },
        "campaign": {
            "get": "get campaign for account",
            "getError": "get campaign error for account",
            "read": "get campaigns for account",
            "readError": "get campaigns for account error",
            "create": "create campaign for account",
            "createError": "create campaign error for account",
            "notFoundError": "campaign not found",
            "put": "update campaign for account",
            "putError": "update campaign for account error"
        },
        "payments": {
            "success": "Payments worker job finished"
        },
        "provider": {
            "notFoundError": "provider not found"
        },
        "cardHolder": {
            "validationError": "Invalid cardHolder domain object",
            "notFoundError": "card holder not found"
        },
        "bankAccount": {
            "create": "Post bank account for user",
            "read": "Read bank accounts for user",
            "get": "Read bank account for user",
            "delete": "Delete bank account for user",
            "patch": "Patch bank account for user",
            "createError": "Post bank account error for user",
            "readError": "Read bank accounts error for user",
            "getError": "Read bank account error for user",
            "deleteError": "Delete bank account error for user",
            "patchError": "Patch bank account error for user",
            "notFoundError": "Bank account not found",
            "validationError": "Invalid field data",
            "verify": "Verify bank account for user",
            "verifyError": "Verify bank account error for user"
        },
        "virtualCard": {
            "create": "Post virtual card for user",
            "read": "Read virtual cards for user",
            "get": "Get virtual card for user",
            "getTransactions": "Get virtual card transactions for user",
            "getTransaction": "Get virtual card transaction for user",
            "getBalance": "Get virtual card balance for user",
            "delete": "Delete virtual card for user",
            "patch": "Patch virtual card for user",
            "fund": "Fund virtual card for user",
            "createError": "Post virtual card error for user",
            "readError": "Read virtual cards error for user",
            "getError": "Read virtual card error for user",
            "getTransactionsError": "Get virtual card transactions error for user",
            "getTransactionError": "Get virtual card transaction error for user",
            "getBalanceError": "Get virtual card balance error for user",
            "deleteError": "Delete virtual card error for user",
            "patchError": "Patch virtual card error for user",
            "notFoundError": "Virtual card not found",
            "validationError": "Invalid field data",
            "fundError": "Fund virtual card error for user",
            "issue": "Issue virtual cards by account",
            "issueError": "Issue virtual card error by account",
            "postEphemeralKeys": "Post virtual card ephemeral keys",
            "postEphemeralKeysError": "Post virtual card ephemeral keys error"
        },
        "ledgerTransaction": {
            "create": "Post ledger transaction for account",
            "read": "Read ledger transactions for account",
            "get": "Get ledger transaction for account",
            "patch": "Patch ledger transaction for account",
            "createError": "Post ledger transaction error for account",
            "readError": "Read ledger transactions error for account",
            "getError": "Read ledger transaction error for account",
            "patchError": "Patch ledger transaction error for account",
            "notFoundError": "Ledger transaction not found",
            "validationError": "Invalid field data"
        },
        "ledgerBalance": {
            "get": "Get ledger balance for account",
            "getError": "Get ledger balance error for account"
        },
        "ledger": {
            "create": "Post ledger for account",
            "read": "Read ledger for account",
            "get": "Get ledger for account",
            "patch": "Patch ledger for account",
            "createError": "Post ledger error for account",
            "readError": "Read ledger error for account",
            "getError": "Read ledger error for account",
            "patchError": "Patch ledger error for account",
            "notFoundError": "Ledger not found",
            "validationError": "Invalid field data"
        },
        "pendingCardsBatch": {
            "get": "Get pending cards batch for accountId"
        },
        "pendingCard": {
            "create": "Post pending card",
            "read": "Read pending cards",
            "readUnauthorized": "Unauthorized read pending cards",
            "get": "Read pending card",
            "delete": "Delete pending card",
            "patch": "Patch pending card",
            "createError": "Post pending card error",
            "readError": "Read pending cards error",
            "getError": "Read pending card error",
            "deleteError": "Delete pending card error",
            "patchError": "Patch pending card error",
            "notFoundError": "Pending card not found",
            "validationError": "Invalid Pending Card field data",
            "issue": "Issue pending cards by account",
            "issueError": "Issue pending cards error by account",
            "invite": "Invite pending cards by account",
            "inviteError": "Invite pending cards error by account"
        },
        "bank": {
            "read": "get banks for user",
            "get": "Read bank for user",
            "getError": "Read bank error for user",
            "notFoundError": "Bank not found"
        },
        "vault": {
            "create": "Post vault for user",
            "read": "Read vault for user",
            "get": "Read vault for user",
            "delete": "Delete vault for user",
            "patch": "Patch vault for user",
            "createError": "Post vault error for user",
            "readError": "Read vault error for user",
            "getError": "Read vault error for user",
            "deleteError": "Delete vault error for user",
            "patchError": "Patch vault error for user",
            "notFoundError": "Vault not found",
            "validationError": "Invalid field data"
        },
        "error": "Internal server error"
    },
    "errors": {
        "notFoundError": "NotFoundError",
        "validationError": "ValidationError",
        "getCampaigns": "get all campaigns",
        "cardExpired": "Card is not active or being expired",
        "pendingCard": "Failed to create pending card",
        "pendingCardQueue": "Pending card queue failed to create new card",
        "pendingCardWorker": "Pending card worker error",
        "cardIssued": "Card status has already been issued",
        "cardAlreadyDeclined": "Card is already declined. You cannot declined it again",
        "paymentsQueue": "Payments worker failed with reason",
        "payments": "Payments worker error",
        "paymentsWorker": "Payments worker failed for data",
        "getPaymentMethods": "failed to get all payment methods",
        "getPendingCardsBatches": "failed to get pending cards batches",
        "paymentMethodValidation": "failed to validate payment method",
        "existingVault": "the user already has a vault",
        "vault": "failed to validate vault",
        "tokenValidationErrorShort": "failed to validate provided token(s)",
        "tokenValidationError": "if token is of type bankAccount you need to provide account and routing tokens. If type is creditCard you need to provide number, expiryMonth, expiryYear, and ccv tokens",
        "addressNotFoundShort": "address not found for user",
        "failedToGetAddress": "failed to get address for user",
        "failedToProxy": "failed to proxy request to service",
        "firebaseRequestFailed": "failed to proxy request to Firebase",
        "patchVaultError": "failed to update the vault",
        "serverError": "ServerError",
        "postVcc": "Failed to create vcc. Try again later",
        "fundVcc": "Failed to fund the vcc. Try again later",
        "invalidBA": "This bank account cannot be used for ACH transfer",
        "phoneNumberNull": "A phone number is required for a new virtual card",
        "bankAccountValidation": "Failed to validate the bank account",
        "virtualCardValidation": "Failed to validate the virtual card",
        "ledgerTransactionValidation": "Failed to validate the ledger transaction",
        "pendingCardsBatchValidation": "Failed to validate the pending cards batch",
        "pendingCardValidation": "Failed to validate the pending card",
        "maxVerificationAttempts": "Number of attempts (3) exceed for bank account verification",
        "alreadyVerified": "Bank Account is already verified",
        "profileNotFoundShort": "profile not found for user",
        "addressNotFound": "address not found",
        "getBanks": "failed to read banks",
        "ledgerBalanceInsufficient": "ledger balance not sufficient",
        "pendingCardInviteStatus": "pending card status should be pending",
        "csvAmount": "funding amount",
        "validation": {
            "invalidId": "invalid uuid for user",
            "invalidStatus": "invalid status; can be one of 'pending', 'issued', 'declined', or 'all'.",
            "invalidInvitationCode": "invalid invitation code",
            "invalidAddressId": "invalid uuid for address",
            "type": "type is required in request body",
            "externalToken": "externalToken is required in request body",
            "providerToken": "providerToken is required in request body",
            "nickname": "nickname is required in request body",
            "masked": "masked is required in request body",
            "isDefault": "isDefault is required in request body with boolean value",
            "invalidPMId": "invalid payment method id in request params",
            "invalidVaultId": "invalid uuid for vault",
            "invalidCPId": "invalid uuid for campaign",
            "vaultData": "data is required in request body",
            "vaultKey": "key is required in request body",
            "vaultVector": "vector is required in request body",
            "publicKey": "publicKey is required in request body",
            "externalTokenSource": "externalTokenSource is required in request body",
            "active": "active must be a boolean value",
            "invalidPendingCardId": "invalid pending card id",
            "invalidCampaignId": "invalid campaign id",
            "invalidVCId": "invalid virtual card id in request params",
            "vAmountA": "validationAmountA is required with int value",
            "vAmountB": "validationAmountB is required with int value",
            "invalidAmount": "amount[INT] in cents is required in request body",
            "invalidProvider": "provider is required in request body",
            "invalidApiVersion": "apiVersion is required in request query",
            "invalidExternalId": "externalId is required in request body",
            "invalidTransactionId": "transactionId is required in request body",
            "failedToValidate": "failed to validate request",
            "failedToGetAccount": "failed to get account from microservice",
            "accountError": "accountNumber (int) is required in request body",
            "routingError": "routingNumber (int) is required in request body",
            "emptyCSV": "must provide a file with .csv extension in request form-data with key value file",
            "failedToRead": "failed to read the csv file. You can try again",
            "invalidCSVEmail": "invalid email format in line",
            "invalidCSVAmount": "invalid amount in line",
            "invalidCSVCurrency": "invalid currency in line",
            "invalidCSVMemo": "invalid memo in line",
            "invalidCSVMessage": "invalid message in line",
            "invalidCSVThirdPartyId": "invalid thirdPartyId in line",
            "invalidCSVName": "invalid name in line",
            "invalidTopupProvider": "invalid provider",
            "invalidTopUpAmount": "invalid amount. must be int in cents",
            "invalidTopUpCurrency": "invalid currency. must be usd",
            "invalidTopUpDescription": "invalid description",
            "invalidTopUpDescriptor": "invalid descriptor. Must be between 3 and 15 characters long",
            "status": "Status is not valid. Should be declined or issued",
            "ledgerTransaction": {
                "status": "Status is not valid. Should be pending or settled or failed",
                "kind": "Kind is not valid. Should be credit or debit",
                "amount": "Amount is not valid. Should be integer"
            },
            "campaign": {
                "cardName": "cardName is required in request body",
                "name": "name is required in request body",
                "description": "description field in body should be 500 characters max",
                "provider": "provider in request body should have one of the following values",
                "cardImageFront": "cardImageFront must be valid url",
                "cardImageBack": "cardImageBack must be valid url",
                "cardNetwork": "cardNetwork in request body should have one of the following values",
                "colorModeFront": "colorModeFront in request body should have one of the following values",
                "colorModeBack": "colorModeBack in request body should have one of the following values",
                "tosUrl": "tosUrl must be valid url",
                "ppUrl": "ppUrl must be valid url"
            }
        }
    }
}
